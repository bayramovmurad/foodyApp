import SideBar from "../../../shared/adminComponents/SideBar/SideBar";
import Header from "../../../shared/adminComponents/Header/Header";
import { useEffect, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { useTranslation } from "react-i18next";
import { onSnapshot, collection, deleteDoc, doc, setDoc } from 'firebase/firestore';
import { db } from "../../../server/configs/firebase";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faXmark , faCheck } from '@fortawesome/free-solid-svg-icons'
import { createOffer } from "../../../services";
import swal from "sweetalert";
import { useRouter } from "next/router";

const AdminOffers: NextPage = () => {
  const { push } = useRouter()
  const { t } = useTranslation()
  const [offers,setOffers] = useState([])
  const colletionRef = collection(db, 'InviteOffers');
  const [isLoading,setIsLoading] = useState<boolean>(false)
  //! Render Offers 
  useEffect(() => {
    setIsLoading(true)
    const unsub = onSnapshot(colletionRef, (querySnapshot) => {
      const items: any = [];
      querySnapshot.forEach((doc) => {
        items.push({...doc.data(), id: doc.id});
      });
      setOffers(items);
    });

    return () => {
      setIsLoading(false)
      unsub();
    };
  }, []);

  const adversitingCollectionRef = collection(db, 'Adversitings');
  
  //! Accept Offer
  const acceptOffer = async (data:any) => {
    const schoolRef = doc(adversitingCollectionRef);
    setDoc(schoolRef, data);
    swal("Reklam Elave olundu")
    deleteOffer(data.id)
  }

  //! Delete Offer
  const deleteOffer = async (id: string) => {
    try {
      await deleteDoc(doc(db, "InviteOffers", id));
      console.log("Document successfully deleted!");
    } catch (error) {
      console.error("Error removing document: ", error);
    }
  }
  
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="px-[19px] min-h-screen bg-[#1E1E30]">
        <Header />

        <div className='flex gap-x-4 '>
          <SideBar />
          <div className="flex flex-col w-full">
            <div className="flex justify-between px-8 py-5 bg-[#27283c] mb-[52px] rounded-lg">
              <h3 className="text-[#C7C7C7] text-xl font-semibold">
                {
                  t("Request")
                }
              </h3>
            </div>

            <div className="flex gap-x-10  gap-y-10 flex-wrap">
              {/* {isLoading ? (
                  <div className="flex justify-center items-center w-full h-[400px]">
                    <span className="text-white text-[30px] font-semibold">Heleki Hec bir data yoxdur</span>
                  </div>
                ) : (
                  <></>
              )} */}

              <div className="w-full">
                <table className="border-collapse bg-white w-full">
                  {
                    offers.length > 0 ? (
                      <thead>
                        <tr>
                          <th className=" border-t p-5">ID</th>
                          <th className=" border-t p-5">Image</th>
                          <th className=" border-t p-5">Name</th>
                          <th className=" border-t p-5">Slug</th>
                          <th className=" border-t p-5">Url</th>
                          <th className=" border-t p-5">Accept</th>
                        </tr>
                      </thead> 
                    ): <></>
                  } 

                  {
                    <tbody>
                      {
                        offers.map((item:any,index) => (
                          <tr>
                              <td className="border-t text-center  p-1 max-w-[290px]  w-[290px] overflow-x-auto whitespace-nowrap">
                                  <span className="border px-2 py-1 rounded-lg w-[290px]">
                                      {
                                        index+1
                                      }
                                  </span>
                              </td>
                              <td className="border-t text-center  p-1 w-[40px] h-[40px]">
                                  <img src={item.img_url} className="w-[40px] object-cover h-[40px]" />
                              </td>
                              <td className="border-t text-center  p-1 max-w-[290px] overflow-x-auto whitespace-nowrap">
                                  {
                                    item.name
                                  }
                              </td>
                              <td className="border-t text-center  p-1 max-w-[290px] overflow-x-auto whitespace-nowrap">
                                  {
                                    item.description
                                  }
                              </td>
                              <td onClick={() => push(item.url)} className="border-t cursor-pointer underline text-center  p-1 max-w-[290px] overflow-x-auto whitespace-nowrap">
                                  {
                                    item.url
                                  }
                              </td>
                              <td className="border-t text-center flex gap-3 font-semibold justify-center items-center h-[54px]">
                                  <button onClick={() => deleteOffer(item.id) } className="border cursor-pointer border-red-700 rounded-full w-6 h-6 flex justify-center items-center text-red-700">
                                    <FontAwesomeIcon icon={faXmark} />
                                  </button>
                                  <button onClick={() => acceptOffer(item)} className="border cursor-pointer border-green-700 rounded-full w-6 h-6 flex justify-center items-center text-green-700">
                                    <FontAwesomeIcon icon={faCheck} />
                                  </button>
                              </td>
                            </tr>
                        ))
                      }
                      
                    </tbody>
                  }
                </table>

                {
                  offers.length == 0 ? (
                    <p className="text-[#fff] ml-5 text-[20px] font-semibold">
                      Heleki Hec bir Data Yoxdur
                    </p>
                  ) :  (
                    <></>
                  )
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>


  );
};

export default AdminOffers;









